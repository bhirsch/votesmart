<?php
/**
 * @file
 *  Votesmart.module
 */
 
// todo remove this dependency by making api calls 100% REST-based
//require_once("libs/slimphp/VoteSmart.php");

/**
 * Implementation of hook_help()
 */
/*
function votesmart_help($path, $arg) {
  if ($path == 'admin/help#votesmart') {
    $txt = '';
    $output = t($txt);
    return $output;
  }
}
// */

function votesmart_menu() {
  $items = array();

  $items['votesmart/lists'] = array(
    'title' => 'Candidate Lists',
    'page callback' => 'votesmart_lists',
    'access arguments' => array('access content'),
    'file' => 'votesmart_lists.inc',
  );
  // votesmart/state/[year]
  $items['votesmart/buildlist/%/%'] = array(
    'title' => 'candidate contact info',
    'page callback' => 'votesmart_candidate_contact_info',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'votesmart_candidate_contact_info.inc',
  );

 
/*
  // Office Class
  // getTypes method
  $items['votesmart/office/gettypes'];
  // getOfficesByType method
  $items['votesmart/office/getofficesbytypes'];

  // Candidates Class
  // getByOfficeState method  
  $items['votesmart/'];

  // Address Class
  // getCampaign method
  
  // getCampaignWebAddressmethod
// */

  return $items;
} 

/**
 * todo 
 *  FOR NOW, JUST GET STATE LEGISLATOR INFO.
 * 
 * Get typeId here:
 * http://api.votesmart.org/Office.getTypes?key=8be7942478e869e453aa7a5b48de02eb
 * 
 * Then get officeId here:
 * (e.g. L for state legislatures)
 * http://api.votesmart.org/Office.getOfficesByType?typeId=L&key=8be7942478e869e453aa7a5b48de02eb
 */
function votesmart_get_office_ids() {
  $office_ids = array(
    'state-senate' => 9, // State Senate
    'state-house' => 8, // House of Representatives
    'state-assembly' => 7, // State Assembly
  );
  return $office_ids;
}
// */

/**
 * @param $class 
 *  string, votesmart api class
 * 
 * @param $method
 *  string, votesmart api method
 * 
 * @param $key
 *  string, votesmart api key
 * 
 * @param $args
 *  array, arguments to be added to REST call in key=value pairs
 * 
 * @return
 *  object, simplexml object
 */ 
function votesmart_xml($class, $method, $key, $args = NULL) {
  $url = 'http://api.votesmart.org/'. $class .'.'. $method .'?key='. $key;
  if ($args) {
    foreach ($args as $key => $value) {
      $url .= "&$key=$value";
    }
  }
//print_r($url);
  $xml = simplexml_load_file($url) or die("url not loading");

/*****
  $obj = new VoteSmart("$class.$method", $args);
  $xml = $obj->getXmlObj();
//*****/

  return $xml;
}

/**
 * @param $office_id
 *  integer, contested elected office for which we're looking up candidates
 * 
 * @param $state
 *  string, two digit state code
 * 
 * @return
 *  array, VoteSmart candidate IDs for requested office and state.
 */ 
/*
function votesmart_get_candidate_ids($office_id, $state, $year = NULL) {
  return $candidate_ids;
}
// */

/**
 * Implementation hook_cron().
 * 
 *  Run data processing jobs.
 * todo replace this with drupal_queue.
 */
function votesmart_cron() {
  // Get data to process on cron until 
  // votesmart/lists shows something as "complete". 
  // Then get link to .csv working on votesmart/lists.
  //   Get contact info for candidates
  //   and store in local tables.
  votesmart_get_contact_info(); 
}

/**
 * Get contact info for all the candidates 
 * in the votesmart_candidates table
 * and add cache locally in 
 * votesmart_address_address, 
 * and votesmart_address_phone, 
 * and votesmart_address_webaddress 
 * tables.
 * 
 * When cron runs twice without incrementing any of the counts 
 * in candidate_records, address_records, phone_records or webaddress_records, 
 * switch status from "pending" to "complete". 
 * 
 * todo  come up with a way to check to see if the contact info we have should be updated. 
 */
function votesmart_get_contact_info() {
  // Get pending lists from voter_list.
  $lists = _votesmart_get_pending_lists();
//dsm($lists);

  // Iterate through each pending list 
  // looking up webaddresses, and basic contact info (address and phone).
  foreach($lists as $list) {
    $file_name = $list['file_name'];
    $candidate_records = $list['candidate_records'];
    $address_records = $list['address_records'];
    $phone_records = $list['phone_records'];
    $webaddress_records = $list['webaddress_records'];
    $year = $list['year'];
    // Format $state. ia should be IA.
    $state = $list['state'];
    $state = strtoupper($state);
    // Format $office. E.g. make "state-senate" into "State Senate"
    $office = $list['office'];
    $office = str_replace('-', ' ', $office);
    $office = ucwords($office);
    // get office_id
    $office_ids = votesmart_get_office_ids();
    $office_id = '';
    foreach($office_ids as $office_name => $id) {
      if (!$office_id) {
        $office_id = ($office_name == $list['office']) ? $id : false;
      }
      $i++;
    }
//dsm($list);
//dsm("office_id: $office_id");

    // Create a new record in votesmart_list
    // to store updated record counts. (Leave timestamp null
    // then stamp it at the very end.)
    db_query("INSERT INTO {votesmart_list} (file_name, status, candidate_records) "
            ."VALUES ('%s', 'processing', %d) ", 
             $file_name, $candidate_records); 

    // Get address_records and phone_record
    //  Skip if phone_records count is >= candidate_records
    //  todo This can probably be made more precise. One candidate
    //  could legitimately have more than one phone or address record.
    if ($phone_records < $candidate_records) {
      _votesmart_get_address_phone($office_id, $state, $file_name);
    }

    // Get webaddress_records
    // Note: Don't ever skip this step. The mysql table will not 
    // create duplicate websites or email addresses. People definitely
    // have multipe websites and email addresses.
    _votesmart_get_webaddress($office, $state, $year, $file_name);    
  
    // Check if list is complete.
    // 
    // Add a timestamped record to votesmart_list every time this process runs.
    // When cron runs twice without incrementing any of the counts in  
    // candidate_records, address_records, phone_records or 
    // webaddress_records, switch status from "pending" to "complete". 
    // 
    // Timestamp latest cron run. 
    $timestamp = time();
    db_query("UPDATE {votesmart_list} SET timestamp = %d "
            ."WHERE file_name = '%s' AND timestamp = 0 ", 
            $timestamp, $file_name); 
    // Now compare two last processing attmepts. 
    $results = db_query("SELECT * FROM {votesmart_list} "
               ."WHERE file_name = '%s' AND status != 'complete' " 
               ."ORDER BY timestamp DESC LIMIT 2", 
               $file_name);
    $batch = array();
    while ($row = db_fetch_object($results)){
      $batch[] = $row;
    }
    // If no new records have been added, processing is complete. 
    // TODO Create a CSV of the results. 
    if ($batch[0]->phone_records == $batch[1]->phone_records 
     && $batch[0]->address_records == $batch[1]->address_records
     && $batch[0]->webaddress_records == $batch[1]->webaddress_records) {
      // make sure directory exists 
      $directory = file_directory_path() ."/votesmart/"; 
      file_check_directory($directory, FILE_CREATE_DIRECTORY);

      // save results to a file
      // (store parameters in filename)
      $full_name = $file_name .'.csv';
      $file_path = "$directory/$full_name"; 
// CONTINUE HERE
//   Write a function that maps VoteSmart data to SalesForce columns.
//   Create the CSV, then dump the contents into the file created here. 
      file_put_contents($file_path, 'this is a test');

      // provide user a link to the file
      global $base_url;
      $path = $base_url .'/'. $file_path; 
      $link = l($full_name, $path);

      db_query("UPDATE {votesmart_list} SET status = 'complete', file_link = '%s' "
            ."WHERE file_name = '%s' AND timestamp = %d ", 
            $link, $file_name, $timestamp); 
    } 
  }
}

/**
 * @return
 *  array('filename' => array('state' => X, 'year' => Y, 'office' => Z)); 
 */
function _votesmart_get_pending_lists() {
  //   Explode '_' in filename to get API params
  //   (e.g. WHERE state = MA and year = 2010).
  //
  // Note: Now that we're creating a record every time
  // a list gets processed, this is  a little sloppy, 
  // because it grabs all the 'pending' records, even
  // after a list is marked 'complete'. This means completed 
  // lists keep getting copied every time cron runs.  
  //
  // todo For now, just filter out lists that have been completed.
  // This is kluggy. In the future, do something more elegant (BH 9/12/10).
  // 
  // Get completed lists to filter out.
  $results = db_query("SELECT file_name FROM {votesmart_list} "
                     ."WHERE status = 'complete' ");
  $exclude = '';
  $i = 0;
  while($row = db_fetch_array($results)) {
    $file_name = $row['file_name']; 
    $exclude .= ($i == 0) ? "'$file_name'" : ", '$file_name'"; 
    $i++;
  }
  // Get pending lists. 
  $results = db_query("SELECT * FROM {votesmart_list} "
                     ."WHERE status = 'pending' " 
                     ."AND file_name NOT IN ( $exclude )" );

/*
  //Build an array of completed lists to be filtered out.
  $results2 = db_query("SELECT file_name FROM {votesmart_list} "
                      ."WHERE status = 'complete' ");
  // TODO Build array of file_name's to exclude. 
  while ($row = db_fetch_array($results)) {
    
  }
// */


  $lists = array();
  while ($row = db_fetch_array($results)) {
    $file_name = $row['file_name'];  
// TODO    if () { 
      $criteria = explode('_', $file_name);
      $lists[$file_name]['file_name'] = $file_name;
      $lists[$file_name]['state'] = $criteria[0];
      $lists[$file_name]['year'] = $criteria[1];
      $lists[$file_name]['office'] = $criteria[2];
      $lists[$file_name]['candidate_records'] = $row['candidate_records']; 
      $lists[$file_name]['address_records'] = $row['address_records']; 
      $lists[$file_name]['phone_records'] = $row['phone_records']; 
      $lists[$file_name]['webaddress_records'] = $row['webaddress_records']; 
// TODO    }
  }

  return $lists;
}

/**
 * @param $office_id
 *  int, VoteSmart id number for office
 * 
 * @param $state_id, 
 *  string, e.g. MA, NY
 * 
 * @param $list_name
 *  string, name of related list (same as file name in votesmart_list table)
 */
function _votesmart_get_address_phone($office_id, $state_id, $list_name) {
//dsm("office_id: $office_id");
//dsm("state_id: $state_id");

  // Get basic contact info for whole list from VoteSmart API.
  $class = 'Address';
  $method = 'getOfficeByOfficeState';
  $key = '8be7942478e869e453aa7a5b48de02eb';
  $args = array('officeId' => $office_id, 'stateId' => $state_id);
  $xml = votesmart_xml($class, $method, $key, $args);
//print_r($xml);

  // Iterate through each candidate storing contact info.
  $count = 0; 
  $timestamp = time();
  foreach ($xml->office as $office) {
    //count records
    $count++;
    $candidateId = (string)$office->candidate->candidateId;
    // votesmart_address_address 
    $type = (string)$office->address->type;
    $typeId = (string)$office->address->typeId;
    $street = (string)$office->address->street;
    $city = (string)$office->address->city;
    $state = (string)$office->address->state;
    $zip = (string)$office->address->zip;
    // votesmart_address_phone
    $phone1 = (string)$office->phone->phone1; 
    $phone2 = (string)$office->phone->phone2;   
    $fax1 = (string)$office->phone->fax1;
    $fax2 = (string)$office->phone->fax2;  
    $tollFree = (string)$office->phone->tollFree;  
    $ttyd = (string)$office->phone->ttyd;  
    $cellphone = (string)$office->phone->cellphone;  
    
/*****
dsm("
candidateId: $candidateId 
type: $type 
typeId: $typeId
street: $street
city: $city
state: $state
zip: $zip
phone1: $phone1
phone2: $phone2
fax1: $fax1
fax2: $fax2
tollFree: $tollFree
ttyd: $ttyd
cellphone: $cellphone
"); 
// ********/

    // Store address info in votesmart_address_address
    db_query("INSERT INTO {votesmart_address_address} " 
            ."(candidateId, type, typeId, street, city, state, zip, timestamp ) "
            ."VALUES(%d, '%s', '%s','%s','%s','%s','%s', %d) ", 
            $candidateId,
            $type,
            $typeId, 
            $street,
            $city,
            $state,
            $zip,
            $timestamp ); 

    // Store phone info in votesmart_address_phone.  
    db_query("INSERT INTO {votesmart_address_phone} "
 ."(candidateId, phone1, phone2, fax1, fax2, tollFree, ttyd, cellphone, timestamp ) " 
 ."VALUES(%d, '%s','%s','%s','%s','%s','%s','%s', %d) ", 
            $candidateId,
            $phone1, 
            $phone2,
            $fax1,
            $fax2,
            $tollFree,
            $ttyd,
            $cellphone,
            $timestamp );
  
    // Update votesmart_list address_records and phone_records counts
    db_query("UPDATE {votesmart_list} "
            ."SET address_records = %d, phone_records = %d "
            ."WHERE file_name = '%s' AND timestamp = 0 ",
            $count, $count, $list_name);
  }
}

/**
 * One-by-one, look up candidates without webaddress info.
 *
 * @param $office
 *  string, VoteSmart human-readable name of office
 * 
 * @param $state
 *  string, VoteSmart stateId (uppercase, like MA, NY, etc.)
 * 
 * @param $year
 *  int, year of election, e.g. 2010
 * 
 * @param $file_name
 *  string, name of related file (or list) in votesmart_list table
 */
function _votesmart_get_webaddress($office, $state, $year, $file_name){
 // Get candidates w/o webaddress info.
/*****
  $results = db_query("SELECT vc.candidateId FROM {votesmart_candidate} vc "
             ."LEFT JOIN {votesmart_address_webaddress} vw "
               ."ON vc.candidateId = vw.candidateId "
             ."WHERE vc.electionOffice = '%s' "
             ."AND vc.officeStateId = '%s' "
             ."AND vc.electionYear = %d "
             ."AND ISNULL(vw.candidateId) ", 
             $office, $state, $year);
*******/

 // Process all web addresses at once. It's easiest this way.
 $results = db_query("SELECT candidateId FROM {votesmart_candidate}  "
           ."WHERE candidateId NOT IN ( SELECT candidateId FROM {votesmart_address_webaddress} )");

  while ($row = db_fetch_object($results)) {
    $candidateId = $row->candidateId;
//dsm($candidateId);
    $timestamp = time();
    // Iterate through candidates one-by-one, getting webaddress info. 
    // Get basic contact info for whole list from VoteSmart API.
    $class = 'Address';
    $method = 'getCampaignWebAddress';
    $key = '8be7942478e869e453aa7a5b48de02eb';
    $args = array('candidateId' => $candidateId);
    $xml = votesmart_xml($class, $method, $key, $args);
//print_r($xml);
    // TODO Add error handling like thie everywhere votesmart_xml() is called. 
    if ($xml->errorMessage) {
      $msg = (string)$xml->errorMessage;
      db_query("INSERT INTO {votesmart_address_webaddress} " 
            ."(candidateId, webAddress, webAddressTypeId, webAddressType, timestamp) "
            ."VALUES (%d, '%s', '%s','%s',%d) ",
            $candidateId, $msg, '', '', $timestamp);
    } else {
      foreach($xml->address as $webaddress) {
        $webAddressTypeId = (string)$webaddress->webAddressTypeId;
        $webAddressType = (string)$webaddress->webAddressType;
        $webAddress = (string)$webaddress->webAddress;
/*
dsm("
webAddressTypeId: $webAddressTypeId
webAddressType: $webAddressType
webAddress: $webAddress
");
// */
        db_query("INSERT INTO {votesmart_address_webaddress} " 
            ."(candidateId, webAddress, webAddressTypeId, webAddressType, timestamp) "
            ."VALUES (%d, '%s', '%s','%s',%d) ",
            $candidateId, $webAddress, $webAddressTypeId, $webAddressType, $timestamp);
      }
    }
  } 
  // Count candidates from this list who now have webaddress info.
  // Update votesmart_list table counts. 
  $results = db_query("SELECT vc.candidateId FROM {votesmart_candidate} vc "
             ."JOIN {votesmart_address_webaddress} vw "
               ."ON vc.candidateId = vw.candidateId "
             ."WHERE electionOffice = '%s' "
             ."AND officeStateId = '%s' "
             ."AND electionYear = %d ",
             $office, $state, $year);
  $count = 0; 
  while ($row = db_fetch_object($results)) {
    $count++;
  }
  db_query("UPDATE {votesmart_list} "
          ."SET webaddress_records = %d "
          ."WHERE file_name = '%s' AND timestamp = 0 ",
          $count, $file_name);
}
