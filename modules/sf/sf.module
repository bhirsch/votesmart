<?php 
/**
 * @file swssf.module
 *  SWS SalesForce module
 * 
 * Format VoteSmart Data for SWS SalesForce
 */

// TODO Try packaging sf as a feature module, export and store TW Views in code. 

/**
 * Implementation of hook_menu(). 
 * 
 * TODO provide a list of links to dynamic views / csv files. 
 */ 
function sf_menu() {
  $items = array();

  $items['votesmart-to-salesforce'] = array(
    'title' => 'Candidate Lists',
    'page callback' => 'sf_lists',
    'access arguments' => array('access content'),
  );

  return $items;
}

function sf_lists() {
  $results = db_query("SELECT DISTINCT State, ElectionYear FROM {sf_votesmart_to_salesforce} "); 
  $paths = array();
  while ($row = db_fetch_object($results)) {
    $state = $row->State;
    $year = $row->ElectionYear;
    $paths[] = "votesmart-to-salesforce/$state/$year/csv";
  }
  foreach ($paths as $path) {
    $output .= l($path, $path); 
    $output .= '<br/>';
  }

  return $output;
}

/**
 * Implementation of hook_cron(). 
 */ 
function sf_cron() {
  // Process votesmart data. 
  _sf_votesmart_to_salesforce();
}

/**
 * Process on cron.
 * 
 * @return 
 *  string, html, send back a link to the CSV file that was just created
 */ 
function _sf_votesmart_to_salesforce() {
  // Add new candidate IDs. Set status 'pending'.
  // Get all 'pending' IDs. 
  $candidateIds = _sf_new_candidateIds(); 
  // Iterate through all candidates whose status is not 'complete'
  foreach($candidateIds as $candidateId) { 
// TODO People with incomplete data never pass with this system. Is this how it should be? Makes sense if we're updating data. But we're not really doing updates right now. (E.g. there are some people who just don't have address records, like candidateId: 122012.)
    $pass = 0; 
    // Get data from votesmart_candidate table. 
    $pass += _sf_votesmart_candidate($candidateId);  
    // Get data votesmart_address_address table.
    $pass += _sf_votesmart_address_address($candidateId);
    // Get data votesmart_address_phone table.
    $pass += _sf_votesmart_address_phone($candidateId); 
    // Get data votesmart_address_webaddress table.
    $pass += _sf_votesmart_address_webaddress($candidateId); 
    // Check if data is done being processed. Each 
    // function returns +1 if it completes its own data processing. 
//dsm($pass);
    if ($pass == 4) {
      // Update status to 'complete'.
      db_query("UPDATE {sf_votesmart_to_salesforce_status} "
       ."SET status = 'complete' WHERE VoteSmartID = %d", $candidateId);
    }
  } 
}


/**
 * Add new candidate IDs to sf_votesmart_to_salesforce_status. Status 'pending'.
 * 
 * @return
 *  array, candidateIds with status 'pending'
 */
function _sf_new_candidateIds() {
  // First, find out candidateIds to exclude. 
  $results = db_query("SELECT VoteSmartID FROM {sf_votesmart_to_salesforce} ");
  $exclude = '';
  $i = 0;
  while($row = db_fetch_array($results)) {
    $candidateId = $row['VoteSmartID']; 
    $exclude .= ($i == 0) ? "$candidateId" : ", $candidateId"; 
    $i++;
  }
  // Get new IDs.
  $sql = "SELECT candidateId FROM {votesmart_candidate} ";
  if ($exclude) {
    $sql .= "WHERE candidateId NOT IN ( $exclude )";
  } 
  $results = db_query($sql);
  // Insert new Ids and set to 'pending'.
  $values0 = '';
  $values1 = '';
  $i = 0; 
  while ($row = db_fetch_object($results)) {
    $candidateId = $row->candidateId; 
    $values0 .= ($i == 0) ? "( $candidateId, 'pending' )" : ", ( $candidateId, 'pending')" ; 
    $values1 .= ($i == 0) ? "( $candidateId )" : ", ( $candidateId )" ; 
    $i++; 
  }
  // Insert new IDs.
  if ($values0) {
    $sql = "INSERT INTO {sf_votesmart_to_salesforce_status} (VoteSmartID, status) " 
          ."VALUES $values0 "; 
    db_query($sql);
    $sql = "INSERT INTO {sf_votesmart_to_salesforce} (VoteSmartID) " 
          ."VALUES $values1 "; 
    db_query($sql);
  }
  
  // Now get all pending candidates's IDs (VoteSmartIDs).
  $results = db_query("SELECT VoteSmartID FROM {sf_votesmart_to_salesforce_status} " 
             ."WHERE status = 'pending' ");
  $candidateIds = array();
  while($row = db_fetch_object($results)) {
    $candidateIds[] = $row->VoteSmartID;
  }

//dsm($candidateIds);
  return $candidateIds; 
}

/**
 * Get data from votesmart_candidate table. 
 * 
 * @return 
 *  int, 1 pass, 0 fail.
 */ 
function _sf_votesmart_candidate($candidateId) {
  $results = db_query("SELECT firstName, lastName, title, electionStateId,  " 
                       ."electionDistrictName, electionOffice, electionParties,  " 
                       ."electionStage, electionDate, electionYear,  "

                       ."electionStatus, electionSpecial, preferredName, suffix, " 
                       ."ballotname, electionDistrictId, electionOfficeId, "
                       ."electionOfficeTypeId, officeParties, officeDistrictId, "
                       ."officeDistrictName, officeStateId, officeId, officeName, "
                       ."officeTypeId, timestamp "

                       ."FROM {votesmart_candidate} "
                       ."WHERE candidateId = %d ", $candidateId);
  while ($row = db_fetch_object($results)) {
    $FirstName = $row->firstName;
    $LastName = $row->lastName;
    $Title = $row->title;
    $State = $row->electionStateId;
    $District = $row->electionDistrictName;
    $Office = $row->electionOffice;
    $Party = $row->electionParties;
    $ElectionStage = $row->electionStage;
    $ElectionDate = $row->electionDate;
    $ElectionYear = $row->electionYear;
    $Notes = ($row->electionStatus) ? "electionStatus: $row->electionStatus, " : '' ; 
      $Notes .= ($row->electionSpecial) ? "electionSpecial: $row->electionSpecial, " : '' ; 
      $Notes .= ($row->preferredName) ? "preferredName: $row->preferredName, " : '' ;
      $Notes .= ($row->suffix) ?  "suffix: $row->suffix, " : '' ;
      $Notes .= ($row->ballotname) ? "ballotname: $row->ballotname, " : '' ; 
      $Notes .= ($row->electionDistrictId) ? "electionDistrictId: $row->electionDistrictId, " : '' ; 
      $Notes .= ($row->electionOfficeId) ? "electionOfficeId: $row->electionOfficeId, " : '' ;
      $Notes .= ($row->electionOfficeTypeId) ? "electionOfficeTypeId: $row->electionOfficeTypeId, " : '' ;
      $Notes .= ($row->officeParties) ? "officeParties: $row->officeParties, " : '' ;
      $Notes .= ($row->officeDistrictId) ? "officeDistrictId: $row->officeDistrictId, " : '' ;
      $Notes .= ($row->officeDistrictName) ? "officeDistrictName: $row->officeDistrictName, " : '' ;
      $Notes .= ($row->officeStateId) ? " officeStateId: $row->officeStateId, " : '' ;
      $Notes .= ($row->officeId) ? "officeId: $row->officeId, " : '' ;
      $Notes .= ($row->officeName) ? "officeName: $row->officeName, " : '' ;
      $Notes .= ($row->officeTypeId) ? "officeTypeId: $row->officeTypeId, " : '' ; 
      $Notes .= ($row->timestamp) ? "timestamp: $row->timestamp, " : '' ; 
      $Notes .= "VoteSmart page: http://votesmart.org/bio.php?can_id=$candidateId ";
  } 
  if ($LastName) {
    db_query("UPDATE {sf_votesmart_to_salesforce} " 
            ."SET " 
              ."FirstName = '%s', "
              ."LastName = '%s', "
              ."Title = '%s', "
              ."State = '%s', "
              ."District = '%s', "
              ."Office = '%s', "
              ."Party = '%s', "
              ."ElectionStage = '%s', "
              ."ElectionDate = '%s', "
              ."ElectionYear = '%s', "
              ."Notes = '%s' "
            ."WHERE VoteSmartID = %d",
              $FirstName, 
              $LastName, 
              $Title, 
              $State, 
              $District, 
              $Office, 
              $Party, 
              $ElectionStage, 
              $ElectionDate, 
              $ElectionYear, 
              $Notes,
            $candidateId); 
/*
dsm("
FirstName              $FirstName, 
LastName              $LastName, 
Title              $Title, 
State              $State, 
District              $District, 
Office              $Office, 
Party              $Party, 
ElectionStage              $ElectionStage, 
ElectionDate              $ElectionDate, 
ElectionYear              $ElectionYear, 
Notes              $Notes,
");
// */
    $pass = 1; 
  } else {
    $pass = 0; 
  }

  return $pass;
}

/**
 * Get data from votesmart_address_address table. 
 * 
 * @return 
 *  int, 1 pass, 0 fail.
 */ 
function _sf_votesmart_address_address($candidateId) {
  $sql = "SELECT city, zip FROM {votesmart_address_address} WHERE candidateId = %d";
  $results = db_query($sql, $candidateId); 
  while($row = db_fetch_object($results)){
    $city = $row->city;
    $zip = $row->zip; 
  }
  if ($city) {
    db_query("UPDATE {sf_votesmart_to_salesforce} "
          ."SET City = '%s', PostalCode = '%s', Country = 'USA' "
          ."WHERE VoteSmartID = %d ", $city, $zip, $candidateId); 
    $pass = 1; 
  } else {
    $pass = 0; 
//dsm($candidateId);
  }
    
  return $pass;
}

/**
 * Get data from votesmart_address_phone table. 
 * 
 * @return 
 *  int, 1 pass, 0 fail.
 * 
 * Phone numbers seem to be entered in 
 * the following ways 
 * 401-295-4352
 * 712-274-8874 (H)   
 * 712-274-8874 (W)
 * 913-341-1028 (Home)
 * 913-341-1028 (Business)
 * 
 * NOTE: Cell phones seem to get stored 
 * in webAddress field in votesmart_address_webaddress.
 * I haven't actually seen a cell phone in a phone1 or phone2 
 * field yet. (BH 9/11/10)
 * 
 * TODO Figure out what to do with this...
 * There are phone numbers for candidateId's in votesmart_address_phone
 * w/o matching records in votesmart_candidate. (e.g. votesmart.org/bio.php?can_id=103301) 
 * I'm not sure if these are for incumbents ('former candidates' not in races now) 
 * or old data that hasn't been cleaned up, or what. For now, leave it.
 * No harm done. NOTE: As I'm testing now 140 of 560 unique candidateId numbers in 
 * the phone table are orphans and only 344 of 1125 candidates from IA, WS, RI, and KS
 * have phone numbers.  
 */ 
function _sf_votesmart_address_phone($candidateId) {
  $results = db_query("SELECT phone1, phone2 FROM {votesmart_address_phone} "
                     ."WHERE candidateId = %d ", $candidateId);
//$sf_debug = variable_get('sf_debug', 0);
//$sf_debug++;
//variable_set('sf_debug', $sf_debug);
//if ($candidateId == '32419') {
//dsm('test');
//}
  while($row = db_fetch_object($results)) {
    $phone1 = trim($row->phone1);
    $phone2 = trim($row->phone2); 
  }
  if ($phone1 || $phone2) {
    $pass = 1; 
    if ($phone1) {
      // if phone1 like 712-274-8874 (W) or 913-341-1028 (Business) 
      if (strpos($phone1, 'W') || strpos($phone1, 'B')) {
        $PhoneDistrictOffice == $phone1;
      // like 712-274-8874 (H) or 913-341-1028 (Home)
      } else if (strpos($phone1, 'H')) {
        $PhoneHome = $phone1; 
      } else {
        $PhoneGovt = $phone1; 
      }
    } 
    if ($phone2) {
      // if phone2 is like this: 401-295-4352
      if (strlen($phone2) == '13' && !$PhoneGovt) {
        $PhoneGovt = $phone2; 
      // if phone2 like 712-274-8874 (W) or 913-341-1028 (Business) 
      } else if ((strpos($phone2, 'W') || strpos($phone2, 'B')) 
         && !$PhoneDistrictOffice) {
        $PhoneDistrictOffice == $phone2;
      } else if ((strpos($phone2, 'W') || strpos($phone2, 'B')) 
         && !$PhoneGovt) {
        $PhoneGovt == $phone2;
      // like 712-274-8874 (H) or 913-341-1028 (Home)
      } else if (strpos($phone2, 'H')) {
        $PhoneHome = $phone2; 
      } else if (!$PhoneDistrictOffice) {
        $PhoneDistrictOffice = $phone2; 
      }
    }
    // Update db with phone numbers
    db_query("UPDATE {sf_votesmart_to_salesforce} " 
            ."SET PhoneDistrictOffice = '%s', " 
              ."PhoneHome = '%s', " 
              ."PhoneGovt = '%s' "
            ."WHERE VoteSmartID = %d ",
            $PhoneDistrictOffice,
            $PhoneHome,
            $PhoneGovt,
            $candidateId);
  } else {
    $pass = 0; 
  }

  return $pass;
}

/**
 * Get data from votesmart_address_webaddress table. 
 * 
 * @return 
 *  int, 1 pass, 0 fail.
 * 
 */  
function _sf_votesmart_address_webaddress($candidateId) {
  $types = array(
    // votesmart webAddressTypeId => salesforce field name
    1 => 'Email',
    2 => 'Webmail',
    3 => 'Website', 
    4 => 'PhoneCell', 
  );

// TODO revise where $pass happens
  foreach($types as $webAddressTypeId => $field) { 
    $results = db_query("SELECT * FROM {votesmart_address_webaddress} " 
                       ."WHERE candidateId = %d "
                       ."AND webAddressTypeId = %d", 
                       $candidateId, 
                       $webAddressTypeId);

    while($row = db_fetch_object($results)) {
      $webAddress = $row->webAddress;
      $webAddressTypeId = $row->webAddressTypeId; 
      $webAddressType = $row->webAddressType; 

/////////////// 
$testId = 124523;
if ($candidateId == $testId) {
print("
---------------------------------------------------------
TESTING candidateId: $testId
---------------------------------------------------------
");
print(" \nCHECKPOINT 1/3 \n");
print_r($row);
print("webAddress: $webAddress \n"); 
print("webAddressTypeId: $webAddressTypeId \n"); 
print("webAddressType: $webAddressType \n"); 
}
///////////////

      if ($webAddress && $webAddress != 'Campaign Web address no longer available or candidate does not exist.') {

/////////////// 
if ($candidateId == $testId) {
print(" \nCHECKPOINT 2/3 \n");
print("webAddress: $webAddress \n");
print("webAddressTypeId: $webAddressTypeId \n");
}
///////////////

      $pass = 1; 
      $sql = "UPDATE {sf_votesmart_to_salesforce} " 
            ."SET $field = '%s' " 
            ."WHERE VoteSmartId = %d ";
      $args = array($webAddress, $candidateId);

///////////////
if ($candidateId == $testId) {
print(" \nCHECKPOINT 3/3 \n");
print("$sql \n");
print_r($args);
}
///////////////

        db_query($sql, $args); 
      } else {
        $pass = 0; 
      }
    }
  }
  return $pass; 
}





